/**
 * This class is generated by jOOQ
 */
package restwars.storage.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import restwars.storage.jooq.tables.Points;

import javax.annotation.Generated;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.7.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PointsRecord extends UpdatableRecordImpl<PointsRecord> implements Record4<UUID, UUID, Long, Long> {

    private static final long serialVersionUID = 344054397;

    /**
     * Setter for <code>PUBLIC.POINTS.ID</code>.
     */
    public void setId(UUID value) {
        setValue(0, value);
    }

    /**
     * Getter for <code>PUBLIC.POINTS.ID</code>.
     */
    public UUID getId() {
        return (UUID) getValue(0);
    }

    /**
     * Setter for <code>PUBLIC.POINTS.PLAYER_ID</code>.
     */
    public void setPlayerId(UUID value) {
        setValue(1, value);
    }

    /**
     * Getter for <code>PUBLIC.POINTS.PLAYER_ID</code>.
     */
    public UUID getPlayerId() {
        return (UUID) getValue(1);
    }

    /**
     * Setter for <code>PUBLIC.POINTS.POINTS</code>.
     */
    public void setPoints(Long value) {
        setValue(2, value);
    }

    /**
     * Getter for <code>PUBLIC.POINTS.POINTS</code>.
     */
    public Long getPoints() {
        return (Long) getValue(2);
    }

    /**
     * Setter for <code>PUBLIC.POINTS.ROUND</code>.
     */
    public void setRound(Long value) {
        setValue(3, value);
    }

    /**
     * Getter for <code>PUBLIC.POINTS.ROUND</code>.
     */
    public Long getRound() {
        return (Long) getValue(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UUID, UUID, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UUID, UUID, Long, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return Points.POINTS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field2() {
        return Points.POINTS.PLAYER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field3() {
        return Points.POINTS.POINTS_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return Points.POINTS.ROUND;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value2() {
        return getPlayerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value3() {
        return getPoints();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getRound();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PointsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PointsRecord value2(UUID value) {
        setPlayerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PointsRecord value3(Long value) {
        setPoints(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PointsRecord value4(Long value) {
        setRound(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PointsRecord values(UUID value1, UUID value2, Long value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PointsRecord
     */
    public PointsRecord() {
        super(Points.POINTS);
    }

    /**
     * Create a detached, initialised PointsRecord
     */
    public PointsRecord(UUID id, UUID playerId, Long points, Long round) {
        super(Points.POINTS);

        setValue(0, id);
        setValue(1, playerId);
        setValue(2, points);
        setValue(3, round);
    }
}
