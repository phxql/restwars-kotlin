/**
 * This class is generated by jOOQ
 */
package restwars.storage.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import restwars.storage.jooq.Keys;
import restwars.storage.jooq.Public;
import restwars.storage.jooq.tables.records.ShipsInConstructionRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.7.3"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ShipsInConstruction extends TableImpl<ShipsInConstructionRecord> {

	private static final long serialVersionUID = -1044809852;

	/**
	 * The reference instance of <code>PUBLIC.SHIPS_IN_CONSTRUCTION</code>
	 */
	public static final ShipsInConstruction SHIPS_IN_CONSTRUCTION = new ShipsInConstruction();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ShipsInConstructionRecord> getRecordType() {
		return ShipsInConstructionRecord.class;
	}

	/**
	 * The column <code>PUBLIC.SHIPS_IN_CONSTRUCTION.ID</code>.
	 */
	public final TableField<ShipsInConstructionRecord, UUID> ID = createField("ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SHIPS_IN_CONSTRUCTION.PLANET_ID</code>.
	 */
	public final TableField<ShipsInConstructionRecord, UUID> PLANET_ID = createField("PLANET_ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SHIPS_IN_CONSTRUCTION.TYPE</code>.
	 */
	public final TableField<ShipsInConstructionRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SHIPS_IN_CONSTRUCTION.DONE</code>.
	 */
	public final TableField<ShipsInConstructionRecord, Long> DONE = createField("DONE", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.SHIPS_IN_CONSTRUCTION</code> table reference
	 */
	public ShipsInConstruction() {
		this("SHIPS_IN_CONSTRUCTION", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.SHIPS_IN_CONSTRUCTION</code> table reference
	 */
	public ShipsInConstruction(String alias) {
		this(alias, SHIPS_IN_CONSTRUCTION);
	}

	private ShipsInConstruction(String alias, Table<ShipsInConstructionRecord> aliased) {
		this(alias, aliased, null);
	}

	private ShipsInConstruction(String alias, Table<ShipsInConstructionRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ShipsInConstructionRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_3;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ShipsInConstructionRecord>> getKeys() {
		return Arrays.<UniqueKey<ShipsInConstructionRecord>>asList(Keys.CONSTRAINT_3);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ShipsInConstructionRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ShipsInConstructionRecord, ?>>asList(Keys.CONSTRAINT_31);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ShipsInConstruction as(String alias) {
		return new ShipsInConstruction(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ShipsInConstruction rename(String name) {
		return new ShipsInConstruction(name, null);
	}
}
