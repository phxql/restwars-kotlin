/*
 * This file is generated by jOOQ.
*/
package restwars.storage.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import restwars.storage.jooq.Keys;
import restwars.storage.jooq.Public;
import restwars.storage.jooq.tables.records.ConstructionSitesRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.0"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ConstructionSites extends TableImpl<ConstructionSitesRecord> {

    private static final long serialVersionUID = -386767608;

    /**
     * The reference instance of <code>PUBLIC.CONSTRUCTION_SITES</code>
     */
    public static final ConstructionSites CONSTRUCTION_SITES = new ConstructionSites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConstructionSitesRecord> getRecordType() {
        return ConstructionSitesRecord.class;
    }

    /**
     * The column <code>PUBLIC.CONSTRUCTION_SITES.ID</code>.
     */
    public final TableField<ConstructionSitesRecord, UUID> ID = createField("ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONSTRUCTION_SITES.PLANET_ID</code>.
     */
    public final TableField<ConstructionSitesRecord, UUID> PLANET_ID = createField("PLANET_ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONSTRUCTION_SITES.TYPE</code>.
     */
    public final TableField<ConstructionSitesRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONSTRUCTION_SITES.LEVEL</code>.
     */
    public final TableField<ConstructionSitesRecord, Integer> LEVEL = createField("LEVEL", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONSTRUCTION_SITES.DONE</code>.
     */
    public final TableField<ConstructionSitesRecord, Long> DONE = createField("DONE", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.CONSTRUCTION_SITES</code> table reference
     */
    public ConstructionSites() {
        this("CONSTRUCTION_SITES", null);
    }

    /**
     * Create an aliased <code>PUBLIC.CONSTRUCTION_SITES</code> table reference
     */
    public ConstructionSites(String alias) {
        this(alias, CONSTRUCTION_SITES);
    }

    private ConstructionSites(String alias, Table<ConstructionSitesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConstructionSites(String alias, Table<ConstructionSitesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConstructionSitesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConstructionSitesRecord>> getKeys() {
        return Arrays.<UniqueKey<ConstructionSitesRecord>>asList(Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ConstructionSitesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConstructionSitesRecord, ?>>asList(Keys.CONSTRAINT_7E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConstructionSites as(String alias) {
        return new ConstructionSites(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConstructionSites rename(String name) {
        return new ConstructionSites(name, null);
    }
}
