/**
 * This class is generated by jOOQ
 */
package restwars.storage.jooq.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import restwars.storage.jooq.Keys;
import restwars.storage.jooq.Public;
import restwars.storage.jooq.tables.records.EventsRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
				"http://www.jooq.org",
				"jOOQ version:3.7.3"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Events extends TableImpl<EventsRecord> {

	private static final long serialVersionUID = 1614335900;

	/**
	 * The reference instance of <code>PUBLIC.EVENTS</code>
	 */
	public static final Events EVENTS = new Events();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<EventsRecord> getRecordType() {
		return EventsRecord.class;
	}

	/**
	 * The column <code>PUBLIC.EVENTS.ID</code>.
	 */
	public final TableField<EventsRecord, UUID> ID = createField("ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.EVENTS.TYPE</code>.
	 */
	public final TableField<EventsRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.EVENTS.ROUND</code>.
	 */
	public final TableField<EventsRecord, Long> ROUND = createField("ROUND", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.EVENTS.PLAYER_ID</code>.
	 */
	public final TableField<EventsRecord, UUID> PLAYER_ID = createField("PLAYER_ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.EVENTS.PLANET_ID</code>.
	 */
	public final TableField<EventsRecord, UUID> PLANET_ID = createField("PLANET_ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.EVENTS</code> table reference
	 */
	public Events() {
		this("EVENTS", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.EVENTS</code> table reference
	 */
	public Events(String alias) {
		this(alias, EVENTS);
	}

	private Events(String alias, Table<EventsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Events(String alias, Table<EventsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<EventsRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_7A;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<EventsRecord>> getKeys() {
		return Arrays.<UniqueKey<EventsRecord>>asList(Keys.CONSTRAINT_7A);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<EventsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<EventsRecord, ?>>asList(Keys.CONSTRAINT_7A9, Keys.CONSTRAINT_7A9A);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Events as(String alias) {
		return new Events(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Events rename(String name) {
		return new Events(name, null);
	}
}
